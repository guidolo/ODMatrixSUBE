
/* ******************************************************************************** */
/* ************   BASE.DB  *******************************************************  */
/* ******************************************************************************** */

/*
MINDISTANCIA -- tabla que contiene en el campo min distancia la distancia que es menor a IDA o al VUELTA

DISTANCIACUADRADO  -- por cada linea - ramal calculo el MSE y el RMSE

LINEASTRXGEO  -- tabla que tiene la equivalencia entre la linea ramal MT y la linea ramal GEO
			  -- solo toma a aquellas lineas que tienen mas de 50 puntos 

RAWPUNTOSCONTROL -- es una copia de RAWPUNTOSCONTROL de redshift. tiene todos los campos en texto porque viene de python

RAWPUNTOSCONTROL2 -- es una copia de RAWPUNTOSCONTROL pero con los tipos de datos bien puestos


*/


--ELIMINO DE LA TABLA DE DISTACIAS CUALQUIER RUTA QUE NO SEA VALIDA
DELETE FROM DISTANCIAS 
WHERE LINEAGEO || '-' || RAMALGEO IN (SELECT linea || '-' || ramal FROM lineascole where baja = 1);


/*esta tabla la carga python desde lineanalisys.py*/
SELECT LINEAMT, RAMALMT, RAMALGEO, COUNT(*), AVG(DISTANCIA)
FROM DISTANCIAS
GROUP BY LINEAMT, RAMALMT, RAMALGEO
ORDER BY LINEAMT, RAMALMT, RAMALGEO;
 


/*por lo tanto, creo la tabla de mindistancia porque cada punto tiene dos medidas distintas*/
DROP TABLE  MINDISTANCIA;

CREATE TABLE MINDISTANCIA AS
SELECT LINEAMT, RAMALMT, LINEAGEO, RAMALGEO, PUNTO, FILE_ID, C_CONTROL_POINT, MIN(DISTANCIA) MINDISTANCIA , COUNT(*) CANTIDADREG
FROM DISTANCIAS 
GROUP BY  LINEAMT, RAMALMT, LINEAGEO, RAMALGEO, PUNTO, FILE_ID, C_CONTROL_POINT;


/*la siguiente consulta debería decir que todos los puntos tienen solo 2 valores*/
/*SELECT CANTIDADREG, COUNT(*)
FROM MINDISTANCIA 
GROUP BY CANTIDADREG;*/
;
SELECT LINEAMT, RAMALMT, COUNT(*) FROM MINDISTANCIA WHERE CANTIDADREG = 1 GROUP BY LINEAMT, RAMALMT ORDER BY  LINEAMT, RAMALMT ;

SELECT LINEAMT, RAMALMT, COUNT(*) FROM MINDISTANCIA WHERE CANTIDADREG = 2 GROUP BY LINEAMT, RAMALMT ORDER BY  LINEAMT, RAMALMT ;

SELECT * FROM MINDISTANCIA LIMIT 1000;


/*en la siguiente tabla calculo la suma de las distancias al cuadrado */
DROP TABLE  DISTANCIACUADRADO;

select * from MINDISTANCIA;

CREATE TABLE DISTANCIACUADRADO AS
SELECT lineamt, ramalmt,lineageo, ramalgeo, file_id,
		sum(power(MINDISTANCIA,2)) distanciacuad, 
		count(*) cantidad, 
		SQRT(sum(power(MINDISTANCIA,2))/ COUNT(*))  RMSE
FROM MINDISTANCIA
WHERE MINDISTANCIA < 50
GROUP BY LINEAMT, RAMALMT, LINEAGEO, RAMALGEO, file_id;

--para el analisis
SELECT LINEAGEO, RAMALMT, RAMALGEO, FILE_ID, CANTIDAD, RMSE
FROM DISTANCIACUADRADO 
WHERE LINEAGEO = '180' AND RAMALMT = '1548';


--consulta para la creacion de la tabla LINEASTRXGEO
CREATE TABLE LINEASTRXGEO AS 
WITH MINRMSELOTE AS
	(SELECT FILE_ID, MIN(RMSE) MINRMSE
	FROM DISTANCIACUADRADO 
	--WHERE LINEAMT = '312'
	GROUP BY FILE_ID
	ORDER BY FILE_ID),
CRUCELINEAS AS (
		SELECT B.LINEAMT, B.RAMALMT, B.LINEAGEO, B.RAMALGEO, COUNT(*) CANTIDADLOTES, AVG(B.RMSE) AVGRMSE, stddev_pop(B.RMSE) DESVRMSE
		FROM MINRMSELOTE A,
			DISTANCIACUADRADO B
		WHERE A.FILE_ID = B.FILE_ID
		  AND MINRMSE = B.RMSE
		GROUP BY B.LINEAMT, B.RAMALMT, B.LINEAGEO, B.RAMALGEO
),
 MAXCANTIDAD AS(
			SELECT B.LINEAMT, B.RAMALMT, B.LINEAGEO,  MAX(CANTIDADLOTES) MAXCANTLOTES
			FROM CRUCELINEAS B
			GROUP BY B.LINEAMT, B.RAMALMT, B.LINEAGEO
)
SELECT A.*
FROM CRUCELINEAS A,
	   MAXCANTIDAD B
WHERE A.LINEAMT = B.LINEAMT
  AND A.RAMALMT = B.RAMALMT
  AND A.LINEAGEO = B.LINEAGEO
  AND A.CANTIDADLOTES = B.MAXCANTLOTES
ORDER BY  A.LINEAGEO, A.RAMALGEO ;



/*por cada linea TRX calculo cual es la mejor linea GEOGRAFICA que se adapta a su recorrido*/
-- CREATE TABLE LINEASTRXGEO AS
-- SELECT A.* 
-- FROM DISTANCIACUADRADO A,
-- 		(SELECT LINEAMT, RAMALMT,  MIN(RMSE) MINRMSE
-- 		FROM DISTANCIACUADRADO
-- 		WHERE CANTIDAD > 50
-- 		GROUP BY LINEAMT, RAMALMT
-- 		) B
-- WHERE A.LINEAMT = B.LINEAMT
--   AND A.RAMALMT = B.RAMALMT
--   AND A.RMSE = B.MINRMSE

ALTER TABLE LINEASTRXGEO
ADD BAJA NUMERIC;

-- PARA ELCASO EN QUE LA CANTIDAD DE LOTES SEA IGUAL SE DESEMPATA POR MINIMO AVGRMSE
update LINEASTRXGEO
SET BAJA = 1
WHERE CANTIDADLOTES <= 2;

UPDATE LINEASTRXGEO
SET BAJA = 2
WHERE (LINEAMT, RAMALMT) IN
		(SELECT LINEAMT, RAMALMT
		FROM LINEASTRXGEO
		WHERE CANTIDADLOTES > 2
		GROUP BY LINEAMT, RAMALMT
		HAVING COUNT(*) > 1
		ORDER BY LINEAMT, RAMALMT
		)
;

UPDATE LINEASTRXGEO
SET BAJA = NULL
WHERE (LINEAMT, RAMALMT, AVGRMSE) IN
		(SELECT LINEAMT, RAMALMT, MIN(AVGRMSE)
		FROM LINEASTRXGEO
		WHERE CANTIDADLOTES > 2
		GROUP BY LINEAMT, RAMALMT
		HAVING COUNT(*) > 1
		ORDER BY LINEAMT, RAMALMT
		);



SELECT * FROM LINEASTRXGEO ORDER BY LINEAMT, RAMALMT, RAMALGEO;

/* ****************************************************************/
/* ********* CONTROLES SOBRE LA TABLA LINEASTRXGEO  ***************/
/* ****************************************************************/
  
SELECT *
FROM LINEASTRXGEO
WHERE LINEAMT = '114' AND RAMALMT = '298'
ORDER BY LINEAMT, RAMALMT
;

SELECT file_id FROM PTOCONTROL201505 
WHERE CODIGOLINEA ='114' and ramal = '298'
GROUP BY file_id;

--hay repetidos??
SELECT LINEAMT, RAMALMT, COUNT(*), MIN(AVGRMSE), MAX(AVGRMSE), CASE WHEN MIN(AVGRMSE) = MAX(AVGRMSE) THEN 1 ELSE 0 END, avg(baja)
FROM LINEASTRXGEO
WHERE BAJA IS NULL
GROUP BY LINEAMT, RAMALMT
HAVING COUNT(*) > 1
ORDER BY LINEAMT, RAMALMT

--DROP TABLE LINEASTRXGEO
;
SELECT * FROM LINEASTRXGEO WHERE LINEAMT = 108 ORDER BY LINEAMT, RAMALMT ;

SELECT * FROM LINEASTRXGEO ORDER BY LINEAMT, RAMALMT ;

---------------------------------------------------------------------
/*LE PEGO LA DISTANCIA DE LAS RUTAS*/


update lineascole a 
set largokm = largo
from largos b
where a.linea2 = b.codigolinea
  and a.ramal = b.ramal
  and a.sentido = b.sentido;
 
